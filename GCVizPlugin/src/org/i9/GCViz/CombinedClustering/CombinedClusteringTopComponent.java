package org.i9.GCViz.CombinedClustering;


import java.awt.Component;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import org.gephi.graph.api.GraphController;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.gephi.graph.api.GraphModel;
import org.openide.util.Lookup;
import org.gephi.layout.api.LayoutController;
import org.gephi.layout.spi.LayoutBuilder;
import org.i9.GCViz.layout.GCVizLayout;
import java.io.File;





/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.gephi.CombinedClustering//CombinedClustering//EN",
autostore = false)
@TopComponent.Description(preferredID = "CombinedClusteringTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "rankingmode", openAtStartup = true)
@ActionID(category = "Window", id = "org.gephi.CombinedClustering.CombinedClusteringTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_CombinedClusteringAction",
preferredID = "CombinedClusteringTopComponent")
@Messages({
    "CTL_CombinedClusteringAction=CombinedClustering",
    "CTL_CombinedClusteringTopComponent=CombinedClustering Window",
    "HINT_CombinedClusteringTopComponent=This is a CombinedClustering window"
})
public final class CombinedClusteringTopComponent extends TopComponent {

    private DBGraphSettingPanel dbgraph = new DBGraphSettingPanel();
    private GamerSettingPanel gamer = new GamerSettingPanel();
    
    public CombinedClusteringTopComponent() {
        initComponents();
        setName(Bundle.CTL_CombinedClusteringTopComponent());
        setToolTipText(Bundle.HINT_CombinedClusteringTopComponent());
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        algorithmComboBox = new javax.swing.JComboBox();
        runButton = new javax.swing.JButton();
        settingButton = new javax.swing.JButton();

        mainPanel.setPreferredSize(new java.awt.Dimension(89, 95));

        algorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select the algorithm...", "GAMer", "DB-CSC" }));

        org.openide.awt.Mnemonics.setLocalizedText(runButton, org.openide.util.NbBundle.getMessage(CombinedClusteringTopComponent.class, "CombinedClusteringTopComponent.runButton.text")); // NOI18N
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(settingButton, org.openide.util.NbBundle.getMessage(CombinedClusteringTopComponent.class, "CombinedClusteringTopComponent.settingButton.text")); // NOI18N
        settingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(runButton))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(settingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                .addComponent(runButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void run() {
        
         LayoutBuilder myLayoutBuilder = new org.i9.GCViz.layout.GCVizLayoutBuilder();
         LayoutController activeLayoutController = Lookup.getDefault().lookup(LayoutController.class);
          activeLayoutController.stopLayout();
     
          
         Object selectedItem = algorithmComboBox.getSelectedItem();
         String path = "";
         if (selectedItem != null) { 
            String algorithm = selectedItem.toString(); 
            GraphModel model = Lookup.getDefault().lookup(GraphController.class).getModel();
                       
           
            if (algorithm.equals("DB-CSC")) {
                path = dbgraph.getPath();
                dbgraph.getCombinedClustering().execute(model, algorithm, path);
            }	        
            
            else if (algorithm.equals("GAMer")){
                path = gamer.getPath();
                gamer.getCombinedClustering().execute(model, algorithm, path); 
            }
            
           
            
           
            GCVizLayout myLayout = new GCVizLayout(myLayoutBuilder);
            activeLayoutController.setLayout(myLayout);
            activeLayoutController.getModel().getSelectedLayout().resetPropertiesValues();
            
            myLayout.resetPropertiesValues();
            myLayout.setClusteringFile(new File(path));
            
            
            double epsilon=0.1;
            if(algorithm.equals("DB-CSC")){
                epsilon = dbgraph.getCombinedClustering().getEpsilon();
                myLayout.setpInf(Boolean.TRUE);
            } else if (algorithm.equals("GAMer")){
                epsilon = gamer.getCombinedClustering().getW_max();
                myLayout.setpInf(Boolean.FALSE);
                myLayout.setP(2.0);
            }
            myLayout.setEpsilon(epsilon);
           
            
            
            activeLayoutController.executeLayout();
               
         }
             
    }


    private void settings() {
        
        CombinedClusteringBuilder builder = new CombinedClusteringBuilder();
        
        DialogDescriptor dd = new DialogDescriptor(dbgraph,builder.getDBGraphName());
        DialogDescriptor d = new DialogDescriptor(gamer,builder.getGamerName());
        String algorithm = (String)algorithmComboBox.getSelectedItem();
        if (algorithm != null) {            
            if (algorithm.equals("DB-CSC")) {
                DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.OK_OPTION);
                dbgraph.setup();
                dbgraph.unsetup();
                //clustererUI.unsetup();
            }        
            else if (algorithm.equals("GAMer")) {
                DialogDisplayer.getDefault().notify(d).equals(NotifyDescriptor.OK_OPTION);
                gamer.setup();
                gamer.unsetup();
            }        
        } 
    }
    
    
    private void settingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingButtonActionPerformed
        settings();
    }//GEN-LAST:event_settingButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        //String item = (String) algorithmComboBox.getSelectedItem();
        run();
    }//GEN-LAST:event_runButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithmComboBox;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton runButton;
    private javax.swing.JButton settingButton;
    // End of variables declaration//GEN-END:variables
    
   
    
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private static class AlgorithmListCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            CombinedClusteringBuilder builder = (CombinedClusteringBuilder) value;
            if (value instanceof CombinedClustering)                
                setText(builder.getDBGraphName());
            else if (value instanceof CombinedClustering)
                     setText(builder.getGamerName());    
                 else setText((String) value);
                        
            return this;
        }
    }    
}
